/*
 * Token.java
 * Copyright 2014 Patrick Meade.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.pmeade.lexer;

import java.util.Objects;

/**
 * Token represents a lexical unit of the input. Each Token corresponds to
 * a subsequence of the original input; the numbers of an integer literal,
 * the letters of a language keyword like "class" or "abstract", etc.
 * 
 * Like String objects, Token objects are immutable. They consist of four
 * values:
 * 
 * - sequence: The ordinal of the Token, as it was generated by the Lexer.
 *             The first token generated is Token 0, then 1, then 2, etc.
 * 
 * - tokenType: The type of the Token. These are the types provided to the
 *              Lexer at construction time. Typical types might be an integer
 *              literal, a left-parenthesis symbol, a semicolon symbol, etc.
 * 
 * - tokenText: The text from the input that was matched and determined to
 *              belong to the provided TokenType.
 * 
 * - position: The position within the original input where this token began.
 *             This value is provided to cross-reference back to the original
 *             input if desired.
 */
public class Token
{
    /**
     * Construct a lexical Token.
     * @param sequence The ordinal of the Token, as it was generated by the
     *                 Lexer. The first token generated is Token 0, then 1,
     *                 then 2, then 3, etc.
     * @param tokenType The type of the Token. These are the types provided
     *                  to the Lexer at construction time. Typical types might
     *                  be an integer literal, a left-parenthesis symbol, a
     *                  semicolon symbol, etc.
     * @param tokenText The text from the input that was matched and determined
     *                  to belong to the provided TokenType.
     * @param position The position within the original input where this token
     *                 began. This value is provided to cross-reference back
     *                 to the original input if desired.
     */
    public Token(
            int sequence,
            TokenType tokenType,
            String tokenText,
            int position)
    {
        this.position = position;
        this.sequence = sequence;
        this.tokenText = tokenText;
        this.tokenType = tokenType;
    }

    /**
     * Obtain the hashCode of this Token.
     * @return the hashCode of this Token
     */
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 79 * hash + this.position;
        hash = 79 * hash + this.sequence;
        hash = 79 * hash + Objects.hashCode(this.tokenText);
        hash = 79 * hash + Objects.hashCode(this.tokenType);
        return hash;
    }

    /**
     * Determine if the provided Object is equivalent (even if not identical)
     * to this Token.
     * @param obj Object to determine equivalence to this Token
     * @return true, if the provided Object is equivalent to this Token,
     *         otherwise false
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Token other = (Token) obj;
        if (this.position != other.position) {
            return false;
        }
        if (this.sequence != other.sequence) {
            return false;
        }
        if (!Objects.equals(this.tokenText, other.tokenText)) {
            return false;
        }
        if (!Objects.equals(this.tokenType, other.tokenType)) {
            return false;
        }
        return true;
    }
    
    /**
     * Obtain the position of this Token. The position corresponds to the
     * offset into the original input.
     * @return the position of this Token
     */
    public int getPosition() {
        return position;
    }

    /**
     * Obtain the sequence of this Token. This is the ordinal of the token
     * as generated by the Lexer. 0th Token, 1st Token, 2nd Token, etc.
     * @return the sequence of this Token
     */
    public int getSequence() {
        return sequence;
    }

    /**
     * Obtain the text of this Token. This is the actual text from the input
     * that was determined to be a complete token.
     * @return the text of this Token
     */
    public String getTokenText() {
        return tokenText;
    }

    /**
     * Obtain the TokenType of this Token. This is the TokenType that the
     * Lexer determined best matched the input and resulted in this Token. 
     * @return the TokenType of this Token
     */
    public TokenType getTokenType() {
        return tokenType;
    }

    /**
     * Obtain a String representation of this Token. This may be useful
     * for debugging purposes.
     * @return a String representation of this Token
     */
    @Override
    public String toString() {
        return "[#" + sequence + " @" + position + " " + tokenType.getName() + " \"" + ((tokenType.getStaticText() == null) ? tokenText : tokenType.getStaticText()) + "\"]";
    }
    
    /**
     * The position within the original input where this token began.
     * This value is provided to cross-reference back to the original input
     * if desired.
     */
    private final int position;

    /**
     * The ordinal of the Token, as it was generated by the Lexer. The first
     * token generated is Token 0, then 1, then 2, then 3, etc.
     */
    private final int sequence;

    /**
     * The text from the input that was matched and determined to belong to
     * the provided TokenType.
     */ 
    private final String tokenText;

    /**
     * The type of the Token. These are the types provided to the Lexer at
     * construction time. Typical types might be an integer literal, a
     * left-parenthesis symbol, a semicolon symbol, etc.
     */
    private final TokenType tokenType;
}
